name: Build, Push to GHCR and Deploy

on:
  push:
    branches: [ main, docker ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check for relevant changes
      id: changes
      run: |
        # Check if there are changes to source code, Dockerfile, or dependencies
        if git diff --name-only HEAD~1 HEAD | grep -E '\.(py|js|ts|json|yml|yaml|Dockerfile|requirements\.txt|package\.json)$'; then
          echo "should-build=true" >> $GITHUB_OUTPUT
        else
          echo "should-build=false" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [check-changes, build-and-push]
    if: always() && needs.check-changes.outputs.should-build == 'true' && needs.build-and-push.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Tailscale
      uses: tailscale/github-action@v3
      with:
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        tags: tag:ci

    - name: Deploy via SSH
      run: |
        sleep 10
        
        ssh -o StrictHostKeyChecking=no efe@100.119.45.125 << 'EOF'
          cd /home/efe/server/instagrambot
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker compose down
          docker compose rm -f
          docker compose up -d
          docker image prune -f
        EOF
